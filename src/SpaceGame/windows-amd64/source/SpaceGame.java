/* autogenerated by Processing revision 1286 on 2025-10-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SpaceGame extends PApplet {

// Zac Hawkins | 18 Sept 2025 | SpaceGame
Spaceship s1;
Boss b1;

ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();
ArrayList<PowerUp> powups = new ArrayList<PowerUp>();
Timer rockTimer, puTimer;
int score, rocksPassed;
SoundFile fire1;
PImage start, gameover;
//SoundFile fire1;
boolean play;
 public void setup() {
  /* size commented out by preprocessor */;
  background(22);
  s1 = new Spaceship();
  b1 = new Boss();
  rockTimer = new Timer(2000);
  puTimer = new Timer(5000);
  puTimer.start();
  rockTimer.start();
  score = 0;
  start = loadImage("startscreen.png");
  gameover = loadImage("gameover.png");
  fire1 = new SoundFile(this, "lasersound.wav");
  play = false;
}

 public void draw() {
  if (play == false) {
    startScreen();
  } else {
    background(22);

if (score>999) {
  b1.display();
  b1.move();
}

    if (puTimer.isFinished()) {
      powups.add(new PowerUp());
      puTimer.start();
    }
    //this will display and move power ups
    for (int i = 0; i<powups.size(); i++) {
      PowerUp pu = powups.get(i);
      pu.display();
      pu.move();

      // check bottom

      //check ship collection
      if (pu.intersect(s1)) {
        powups.remove(pu);
        if (pu.type == 'h') {
          s1.health+=100;
          //Turret increase
        } else if (pu.type == 't') {
          s1.turretCount+=1;
          if (s1.turretCount>5) {
            s1.turretCount = 5;
          }
        } else if (pu.type == 'a') {
          s1.laserCount+=100;
        }
      }
    }
    //display all stars
    stars.add(new Star());
    if (rockTimer.isFinished()) {
      rocks.add(new Rock());
      rockTimer.start();
    }
    //display all stars
    for (int i = 0; i < stars.size(); i++) {
      Star star = stars.get(i);
      star.move();
      star.display();
      if (star.reachedBottom()) {
        stars.remove(star);
        i--;
      }
    }


    //display all rocks and moves
    for (int i = 0; i < rocks.size(); i++) {
      Rock rock = rocks.get(i);
      rock.move();
      rock.display();

      if (s1.intersect(rock)) {
        rocks.remove(rock);
        s1.health-=10;
      }
      if (rock.reachedBottom()) {
        rocksPassed++;
        rocks.remove(rock);
        i--;
      }
      println(rocks.size());
    }
    // Display and move lasers
    for (int i = 0; i < lasers.size(); i++) {
      Laser laser = lasers.get(i);
      for (int j=0; j<rocks.size(); j++) {
        Rock r = rocks.get(j);
        if (laser.intersect(r)) {
          lasers.remove(laser);
          r.diam -= 50;
          if (r.diam<5) {
            rocks.remove(r);
          }
          score+=r.diam;
        }
      }
      laser.display();
      laser.move();
    }

    s1.display();
    s1.move(mouseX, mouseY);

    infoPannel();

    if (s1.health<1) {
      gameOver();
    }
  }
}

   public void mousePressed() {
    lasers.add(new Laser(s1.x, s1.y));
    s1.laserCount--;
  }

   public void infoPannel() {
    rectMode(CENTER);
    fill(127, 127);
    rect(width/2, height-25, width, 50);
    fill(255);
    text("score: " + score, 30, width-20);
    text("rocks passed: " + rocksPassed, width - 200, width-20);
    text("Health: " + s1.health, 30, width);
    text("Ammo: " + s1.laserCount, width - 200, width);
  }

   public void startScreen() {
    image(start, 0, 0);
    start. resize(600, 600);
    fill(255);
    if (mousePressed) {
      play = true;
    }
  }

   public void gameOver() {
    image(gameover,width/2,height/2);
    gameover. resize(600, 600);
    fill(255);
    play = false;
  }
class Boss {
  // Member Variables
  int x, y, diam, speed;
  PImage b1;
  

  // Constructor
  Boss() {
    x = PApplet.parseInt(random(width));
    y = -100;
    diam = PApplet.parseInt(random(150, 250)) ;
    speed = PApplet.parseInt(random(1, 10));
  }

  // Member Methods
   public void display() {
    imageMode(CENTER);
    b1.resize(diam, diam);
    image(b1, x, y);
  }

   public void move() {
    y = y + speed;
  }

   public boolean reachedBottom() {
    if (y>height+100) {
      return true;
    } else {
      return false;
    }
  }
}
class Laser {
  // Member Variables
  int x, y, w, h, speed;
  PImage l1;

  // Constructor
  Laser(int x, int y) {
    this.x = x;
    this.y = y;
    w = 4;
    h = 10;
    speed = 15;
    l1 = loadImage("laser.png");
  }

  // Member Methods
   public void display() {
    imageMode(CENTER);
    l1.resize(60, 75);
    image(l1, x, y);
  }

   public void move() {
    y = y - speed;
  }

   public boolean reachedTop() {
    if (y<0-10) {
      return true;
    } else {
      return false;
    }
  }
  
    public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class PowerUp {
  // Member Variables
  int x, y, diam, speed;
  char type;
  //PImage p1;
  int c1;
  // Constructor
  PowerUp() {
    x = PApplet.parseInt(random(width));
    y = -100;
    diam = 100;
    speed = 5;
    int c1;
    if (random(10)>6.6f) {
      // p1 = loadImage("turret.png");
      //type = 't'; //turretCount;
      //c1 = color(0, 0, 255);
    } else if (random(10)>5.0f) {
      //  p1 = loadImage("Health.png");
      type = 'h';
      c1 = color(0, 255, 0);
      //  p1 = loadImage("rock3.png");
      // }
       } else if (random(10)>5.0f) {
      //  p1 = loadImage("Health.png");
      type = 'a';
      c1 = color(0, 0, 255);
      //  p1 = loadImage("rock3.png");
      // }
    }
  }
  // Member Methods
   public void display() {
    fill (c1);
    ellipse(x, y, diam, diam);
    fill(255);
    textAlign(CENTER);
    text(type, x, y);
    // imageMode(CENTER);
    // p1.resize(diam, diam);
    //image(p1, x, y);
  }

   public void move() {
    y = y + speed;
  }

   public boolean reachedBottom() {
    if (y>height+100) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(Spaceship s1) {
    float d = dist(x, y, s1.x, s1.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Rock {
  // Member Variables
  int x, y, diam, speed;
  PImage r1;

  // Constructor
  Rock() {
    x = PApplet.parseInt(random(width));
    y = -100;
    diam = PApplet.parseInt(random(85, 150));
    speed = PApplet.parseInt(random(1, 10));
    if (random(10)>6.6f) {
      r1 = loadImage("rock1.png");
    } else if (random(10)>5.0f) {
      r1 = loadImage("rock2.png");
    } else {
      r1 = loadImage("rock3.png");
    }
  }

  // Member Methods
   public void display() {
    imageMode(CENTER);
    r1.resize(diam, diam);
    image(r1, x, y);
  }

   public void move() {
    y = y + speed;
  }

   public boolean reachedBottom() {
    if (y>height+100) {
      return true;
    } else {
      return false;
    }
  }
}
class Spaceship {
  // Member Variables
  int x, y, w, health, laserCount, turretCount;
  //PImage ship;

  // Constructor
  Spaceship() {
    x = width/2;
    y = height/2;
    w = 100;
    health = 100;
    laserCount = 100;
    turretCount = 1;
    //ship = loadImage("filename.png");
  }

  // Member Methods
   public void display() {
    //imageMode(CENTER);
    //image(ship,x,y);
    fill(127);
    stroke(50, 60, 120);
    ellipse(x, y, 80, 20);
    rectMode(CENTER);
    stroke(20, 50, 167);
    ellipse(x, y, 20, 50);
    stroke(50, 60, 120);
    triangle(x, y-20, x-50, y, x+50, y);
    line(x-30, y+35, x-30, y+10);
    line(x+30, y+35, x+30, y+10);
    fill(20, 50, 127);
    triangle(x, y-17, x-45, y-5, x+45, y-5);
  }

   public void move(int x, int y) {
    this.x = x;
    this.y = y;
  }

   public boolean fire() {
    if(laserCount>0) {
    return true;
    } else {
      return false;
    }
  }

   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  int x, y, w, speed;

  Star() {
    x = PApplet.parseInt(random(width));
    y = -10;
    w = PApplet.parseInt(random(1, 5));
    speed = PApplet.parseInt(random(1, 10));
  }

   public void display() {
    fill(random(255, 255));
    ellipse(x, y, w, w);
  }

   public void move() {
    y+=speed;
  }

   public boolean reachedBottom () {
    if (y>height+10) {
      return true;
    } else {
      return false;
    }
  }
}
// Daniel Shiffman
// Example 10-5: Object-oriented timer

class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
   public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(600, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SpaceGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
